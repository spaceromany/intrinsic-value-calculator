import random
from itertools import product

# 형용사 목록
ADJECTIVES = [
    # 성격 관련
    "부지런한", "현명한", "침착한", "신중한", "철저한", "꼼꼼한", "성실한", 
    "근면한", "지혜로운", "분별있는", "통찰력있는", "예리한", "집중하는", 
    "분석적인", "전략적인", "장기적인", "안정적인", "균형잡힌", "체계적인",
    "신중한", "침착한", "집중하는", "분석적인", "전략적인", "장기적인",
    "안정적인", "균형잡힌", "체계적인", "논리적인", "객관적인", "주도적인",
    "창의적인", "혁신적인", "도전적인", "적극적인", "열정적인", "성실한",
    "책임감있는", "신뢰할수있는", "정직한", "성실한", "근면한", "성실한",
    "성실한", "성실한", "성실한", "성실한", "성실한", "성실한", "성실한",
    
    # 투자 관련
    "가치투자하는", "성장투자하는", "배당투자하는", "안전투자하는", "장기투자하는",
    "단기투자하는", "중기투자하는", "분산투자하는", "집중투자하는", "적립투자하는",
    "정기투자하는", "불규칙투자하는", "시장투자하는", "개별투자하는", "섹터투자하는",
    "테마투자하는", "글로벌투자하는", "국내투자하는", "해외투자하는", "신흥시장투자하는",
    
    # 투자 철학
    "가치중시하는", "성장중시하는", "배당중시하는", "안전중시하는", "장기중시하는",
    "단기중시하는", "중기중시하는", "분산중시하는", "집중중시하는", "적립중시하는",
    "정기중시하는", "불규칙중시하는", "시장중시하는", "개별중시하는", "섹터중시하는",
    "테마중시하는", "글로벌중시하는", "국내중시하는", "해외중시하는", "신흥시장중시하는",
    
    # 투자 스타일
    "가치추구하는", "성장추구하는", "배당추구하는", "안전추구하는", "장기추구하는",
    "단기추구하는", "중기추구하는", "분산추구하는", "집중추구하는", "적립추구하는",
    "정기추구하는", "불규칙추구하는", "시장추구하는", "개별추구하는", "섹터추구하는",
    "테마추구하는", "글로벌추구하는", "국내추구하는", "해외추구하는", "신흥시장추구하는"
]

# 이름 목록
NAMES = [
    # 투자 대가
    "그레이엄", "버핏", "피셔", "린치", "템플턴", "그로스", "소로스", "달리오",
    "몽거", "슈퍼", "로스", "카네기", "록펠러", "모건", "워렌", "피터", "찰리",
    "마이어", "멍거", "스노우", "그린버그", "캐플란", "클론", "슈워츠", "아커먼",
    

    # 글로벌 투자자
    "피터린치", "워렌버핏", "찰리멍거", "조지소로스", "레이달리오", "존템플턴",
    "필립피셔", "벤자민그레이엄", "존보글", "피터린치", "워렌버핏", "찰리멍거",
    "조지소로스", "레이달리오", "존템플턴", "필립피셔", "벤자민그레이엄", "존보글",
    
    # 현대 투자자
    "캐시우드", "빌게이츠", "제프베조스", "일론머스크", "마크저커버그", "래리페이지",
    "세르게이브린", "팀쿡", "사티아나델라", "캐시우드", "빌게이츠", "제프베조스",
    "일론머스크", "마크저커버그", "래리페이지", "세르게이브린", "팀쿡", "사티아나델라"
]

# 모든 가능한 조합 생성
ALL_COMBINATIONS = list(product(ADJECTIVES, NAMES))
# 조합 섞기
random.shuffle(ALL_COMBINATIONS)

def generate_anonymous_id(device_id=None):
    """고유한 익명 ID 생성"""
    if not ALL_COMBINATIONS:
        # 모든 조합을 다 사용했다면 다시 섞기
        random.shuffle(ALL_COMBINATIONS)
    
    # 조합 하나 가져오기
    adjective, name = ALL_COMBINATIONS.pop()
    return f"{adjective} {name}"

# 테스트
if __name__ == "__main__":
    # 조합 개수 확인
    print(f"총 가능한 조합 수: {len(ALL_COMBINATIONS)}")
    
    # 몇 개의 ID 생성 테스트
    for _ in range(5):
        print(generate_anonymous_id()) 